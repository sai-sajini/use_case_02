Generate a complete Selenium Test Automation Framework using the following specifications:

Tech Stack & Dependencies:

Java 17
Selenium 4.24.0
Cucumber BDD Framework
Page Object Model (POM) with @FindBy annotations
WebDriverManager 5.9.2 for driver setup
Extent Reports for reporting
Log4j 2.x for logging
Implicit wait of 20 seconds to reduce flakiness

pom.xml requirements:

cucumber-java version 7.18.1
cucumber-junit version 7.18.1
org.junit.jupiter → not required
org.apache.poi version 5.3.0
Replace poi-ooxml with poi-ooxml-schemas version 4.12
Remove dependency: com.fasterxml.jackson.core
Replace maven-compiler-plugin with maven-surefire-report-plugin version 3.5.0

Project Structure:

Follow MNC/product-based company standards:

src/main/java/com/yourcompany/pages     → Page Object classes for all UI components
src/main/java/com/yourcompany/utils     → Utility classes (DriverManager, ConfigReader, LoggerUtil)
src/test/java/com/yourcompany/steps     → Step Definitions (must utilize all methods & variables in POM classes)
src/test/java/com/yourcompany/runners   → Test Runner classes
src/test/java/com/yourcompany/hooks     → Hooks (setup/teardown)
src/test/resources/features             → Feature files (positive & negative scenarios for all flows)
src/test/resources/config               → Config files (config.properties, log4j2.xml)
src/test/resources/testdata             → Test data (Excel, JSON)

Requirements:

Page Objects:

Use @FindBy for all locators.
Include methods to interact with all UI elements (buttons, inputs, dropdowns, tables, file uploads, drag & drop, etc.).

Step Definitions:

Must map Cucumber steps to Page Object methods.
Use values from config.properties.
Ensure all functions written in POM classes are utilized in step definitions.

Feature Files:

Must include positive and negative test scenarios inferred from UI flows (e.g., login, registration, form submission, file upload, drag & drop).
Should dynamically use input values from config/testdata.

Config:

config.properties must include: browser, baseURL, credentials, waits, and dynamic inputs.
Support cross-browser execution (Chrome and Firefox).

Reporting & Logging:

Integrate Extent Reports for detailed test reports.
Integrate Log4j 2.x for logging.

Execution:

Framework must be ready to run without manual changes.
Ensure modular, maintainable, and production-grade code.
Automatically detect all major UI components and flows, scaffold everything (POM, Steps, Features, Config, Utilities) without requiring manual intervention.
