{
"pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.yourcompany</groupId>\n    <artifactId>selenium-bdd-cucumber-pom</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.seleniumhq.selenium</groupId>\n            <artifactId>selenium-java</artifactId>\n            <version>4.24.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.cucumber</groupId>\n            <artifactId>cucumber-java</artifactId>\n            <version>7.16.1</version>\n        </dependency>\n        <dependency>\n            <groupId>io.cucumber</groupId>\n            <artifactId>cucumber-junit</artifactId>\n            <version>7.16.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.github.bonigarcia</groupId>\n            <artifactId>webdrivermanager</artifactId>\n            <version>5.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.aventstack</groupId>\n            <artifactId>extentreports</artifactId>\n            <version>5.0.9</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.17.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.17.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml</artifactId>\n            <version>5.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.15.2</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n",
"src/main/java/com/yourcompany/pages/LoginPage.java": "package com.yourcompany.pages;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\npublic class LoginPage {\n    private WebDriver driver;\n\n    @FindBy(id = \"username\")\n    private WebElement usernameInput;\n\n    @FindBy(id = \"password\")\n    private WebElement passwordInput;\n\n    @FindBy(tagName = \"button\")\n    private WebElement loginButton;\n\n    @FindBy(className = \"login-container\")\n    private WebElement loginContainer;\n\n    public LoginPage(WebDriver driver) {\n        this.driver = driver;\n        PageFactory.initElements(driver, this);\n    }\n\n    public void enterUsername(String username) {\n        usernameInput.clear();\n        usernameInput.sendKeys(username);\n    }\n\n    public void enterPassword(String password) {\n        passwordInput.clear();\n        passwordInput.sendKeys(password);\n    }\n\n    public void clickLogin() {\n        loginButton.click();\n    }\n\n    public boolean isLoginContainerDisplayed() {\n        return loginContainer.isDisplayed();\n    }\n}\n",
"src/main/java/com/yourcompany/utils/DriverManager.java": "package com.yourcompany.utils;\n\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.edge.EdgeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class DriverManager {\n    private static WebDriver driver;\n\n    public static WebDriver getDriver() {\n        if (driver == null) {\n            String browser = ConfigReader.getProperty(\"browser\");\n            switch (browser.toLowerCase()) {\n                case \"chrome\" -> {\n                    WebDriverManager.chromedriver().setup();\n                    driver = new ChromeDriver();\n                }\n                case \"edge\" -> {\n                    WebDriverManager.edgedriver().setup();\n                    driver = new EdgeDriver();\n                }\n                case \"firefox\" -> {\n                    WebDriverManager.firefoxdriver().setup();\n                    driver = new FirefoxDriver();\n                }\n                default -> throw new IllegalArgumentException(\"Unsupported browser: \" + browser);\n            }\n            driver.manage().window().maximize();\n        }\n        return driver;\n    }\n\n    public static void quitDriver() {\n        if (driver != null) {\n            driver.quit();\n            driver = null;\n        }\n    }\n}\n",
"src/main/java/com/yourcompany/utils/ConfigReader.java": "package com.yourcompany.utils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class ConfigReader {\n    private static Properties properties = new Properties();\n    private static final String CONFIG_PATH = \"src/test/resources/config/config.properties\";\n\n    static {\n        try {\n            FileInputStream fis = new FileInputStream(CONFIG_PATH);\n            properties.load(fis);\n            fis.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not load config properties file.\", e);\n        }\n    }\n\n    public static String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n}\n",
"src/main/java/com/yourcompany/utils/LoggerUtil.java": "package com.yourcompany.utils;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class LoggerUtil {\n    public static Logger getLogger(Class<?> clazz) {\n        return LogManager.getLogger(clazz);\n    }\n}\n",
"src/main/java/com/yourcompany/utils/ExtentReportUtil.java": "package com.yourcompany.utils;\n\nimport com.aventstack.extentreports.ExtentReports;\nimport com.aventstack.extentreports.reporter.ExtentHtmlReporter;\nimport com.aventstack.extentreports.reporter.configuration.Theme;\n\npublic class ExtentReportUtil {\n    private static ExtentReports extentReports;\n    private static final String REPORT_PATH = \"./target/ExtentReports.html\";\n\n    public static ExtentReports getExtentReports() {\n        if (extentReports == null) {\n            ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(REPORT_PATH);\n            htmlReporter.config().setTheme(Theme.STANDARD);\n            htmlReporter.config().setDocumentTitle(\"Selenium Test Automation Report\");\n            htmlReporter.config().setReportName(\"Test Results\");\n            extentReports = new ExtentReports();\n            extentReports.attachReporter(htmlReporter);\n        }\n        return extentReports;\n    }\n}\n",
"src/test/java/com/yourcompany/steps/LoginSteps.java": "package com.yourcompany.steps;\n\nimport com.yourcompany.pages.LoginPage;\nimport com.yourcompany.utils.ConfigReader;\nimport com.yourcompany.utils.DriverManager;\nimport com.yourcompany.utils.LoggerUtil;\nimport org.apache.logging.log4j.Logger;\nimport org.openqa.selenium.WebDriver;\nimport org.junit.Assert;\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.When;\nimport io.cucumber.java.en.And;\nimport io.cucumber.java.en.Then;\n\npublic class LoginSteps {\n    private WebDriver driver;\n    private LoginPage loginPage;\n    private static final Logger logger = LoggerUtil.getLogger(LoginSteps.class);\n\n    @Given(\"user is on login page\")\n    public void user_is_on_login_page() {\n        driver = DriverManager.getDriver();\n        String baseUrl = ConfigReader.getProperty(\"baseURL\