Your are a Selenium UI testing expert. Generate a complete Selenium Test Automation Project in Java.
INPUT: Project file
OUTPUT: Selenium Test Automation Project
Think about Generating Selenium Test Automation Project using the following specifications:

Tech Stack & Requirements:

Selenium 4.24.0
Java 17
Cucumber BDD framework
Page Object Model (POM) using @FindBy annotations
WebDriverManager 5.9.2 for driver setup
Extent Reports for reporting
Log4j 2.x for logging

Maven project structure:

src/main/java/com/yourcompany/pages → Page Object classes for all major UI components and flows
src/main/java/com/yourcompany/utils → Utility classes (DriverManager, ConfigReader, LoggerUtil)
src/test/java/com/yourcompany/steps → Step definitions for all pages/components
src/test/java/com/yourcompany/runners → Test runner classes
src/test/java/com/yourcompany/hooks → Hooks for setup/teardown
src/test/resources/features → Feature files for all scenarios
src/test/resources/config → Config files (config.properties, log4j2.xml)
src/test/resources/testdata → Test data files (Excel, JSON)

All Page Objects must use @FindBy for locators and include logic to interact with UI elements (buttons, inputs, dropdowns, tables, etc.).
All step definitions must map Cucumber steps to Page Object methods and use config.properties for input values.
Implement positive and negative scenarios for all major flows (e.g., login, form submission, file upload, drag & drop, etc.).
Integrate Extent Reports and Log4j for reporting and logging.
Use config.properties for browser, baseURL, credentials, and all dynamic input values.
Ensure code is modular, maintainable, and follows best practices.

Instructions:

Automatically detect all major UI components and flows.
Scaffold the Maven project structure and generate all required code, config, and resource files.
Ensure all logic is implemented and ready to run.
Do not require any manual intervention.

You must give your entire response as a Python dictionary.
Each key should be file name, and value should be the complete contents of that file as a string.
Do not include explanations, comments, or any extra text. It will be accepted only if it is needed in the code file as comments.
Use the following examples to learn how to respond.
correct Example output:
{
"main.py": "print("Hello, world!")\n"
}

incorrect example: 
We are creating a simple calculator project with the following structure: A main script: `calculator/main.py`, A module for calculator operations: `calculator/operations.py`, A requirements.txt file , though no external ---- 

I will attach the project structure(list of file names with directories) and the file for which you have to generate code.
